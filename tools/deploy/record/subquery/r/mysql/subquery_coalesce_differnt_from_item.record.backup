create database if not exists test;
use test;
DROP TABLE IF EXISTS t1, t2, t3, t4;
CREATE TABLE t1 (c0 INT, c1 INT,c2 INT,c3 INT);
CREATE TABLE t2 (c0 INT, c1 INT,c2 INT,c3 INT);
CREATE TABLE t3 (c0 INT, c1 INT,c2 INT,c3 INT);
CREATE TABLE t4 (c0 INT, c1 INT,c2 INT,c3 INT);
EXPLAIN SELECT * FROM t1
WHERE c1 in (
SELECT c1 FROM t2 
)
AND c1 in (
SELECT t2.c1 FROM t2,t3
WHERE t2.c2 = t3.c2 
);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |1       |8           |
|1 |├─SUBPLAN SCAN       |VIEW1|1       |5           |
|2 |│ └─HASH JOIN        |     |1       |5           |
|3 |│   ├─TABLE FULL SCAN|t3   |1       |3           |
|4 |│   └─TABLE FULL SCAN|t2   |1       |3           |
|5 |└─TABLE FULL SCAN    |t1   |1       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), rowset=16
      access([VIEW1.c1])
  2 - output([t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c2 = t3.c2]), other_conds(nil)
  3 - output([t3.c2]), filter(nil), rowset=16
      access([t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t2.c2], [t2.c1]), filter(nil), rowset=16
      access([t2.c2], [t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.c1], [t1.c0], [t1.c2], [t1.c3]), filter(nil), rowset=16
      access([t1.c1], [t1.c0], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
EXPLAIN SELECT * FROM t1
WHERE c1 in (
SELECT c1 FROM t2 
)
AND c1 in (
SELECT t2.c1 FROM t2,t3 
WHERE t2.c2 = t3.c2 
AND t2.c3 > 1
);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |1       |7           |
|1 |├─SUBPLAN SCAN       |VIEW1|1       |5           |
|2 |│ └─HASH JOIN        |     |1       |5           |
|3 |│   ├─TABLE FULL SCAN|t2   |1       |3           |
|4 |│   └─TABLE FULL SCAN|t3   |1       |3           |
|5 |└─TABLE FULL SCAN    |t1   |1       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), rowset=16
      access([VIEW1.c1])
  2 - output([t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c2 = t3.c2]), other_conds(nil)
  3 - output([t2.c2], [t2.c1]), filter([t2.c3 > 1]), rowset=16
      access([t2.c2], [t2.c3], [t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.c2]), filter(nil), rowset=16
      access([t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.c1], [t1.c0], [t1.c2], [t1.c3]), filter(nil), rowset=16
      access([t1.c1], [t1.c0], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
EXPLAIN SELECT * FROM t1
WHERE c1 in (
SELECT c1 FROM t2 
WHERE t2.c3 > 1
)
AND c1 in (
SELECT t2.c1 FROM t2,t3
WHERE t2.c2 = t3.c2 
AND t2.c3 > 1
AND t3.c2 < 7
);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |1       |7           |
|1 |├─SUBPLAN SCAN       |VIEW1|1       |5           |
|2 |│ └─HASH JOIN        |     |1       |5           |
|3 |│   ├─TABLE FULL SCAN|t2   |1       |3           |
|4 |│   └─TABLE FULL SCAN|t3   |1       |3           |
|5 |└─TABLE FULL SCAN    |t1   |1       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), rowset=16
      access([VIEW1.c1])
  2 - output([t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c2 = t3.c2]), other_conds(nil)
  3 - output([t2.c2], [t2.c1]), filter([t2.c3 > 1], [t2.c2 < 7]), rowset=16
      access([t2.c2], [t2.c3], [t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.c2]), filter([t3.c2 < 7]), rowset=16
      access([t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.c1], [t1.c0], [t1.c2], [t1.c3]), filter(nil), rowset=16
      access([t1.c1], [t1.c0], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
EXPLAIN SELECT * from t1
where c1 in (
select t2.c1 from t2
)
and c1 in (
select t2.c1 from t2 inner join t3 on t2.c1=t3.c1 
where exists(select 1 from t4 where t4.c1=t2.c1)
);
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN   |     |1       |12          |
|1 |├─SUBPLAN SCAN         |VIEW3|1       |7           |
|2 |│ └─HASH SEMI JOIN     |     |1       |7           |
|3 |│   ├─HASH JOIN        |     |1       |5           |
|4 |│   │ ├─TABLE FULL SCAN|t2   |1       |3           |
|5 |│   │ └─TABLE FULL SCAN|t3   |1       |3           |
|6 |│   └─TABLE FULL SCAN  |t4   |1       |3           |
|7 |└─HASH RIGHT SEMI JOIN |     |1       |5           |
|8 |  ├─TABLE FULL SCAN    |t2   |1       |3           |
|9 |  └─TABLE FULL SCAN    |t1   |1       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW3.c1]), other_conds(nil)
  1 - output([VIEW3.c1]), filter(nil), rowset=16
      access([VIEW3.c1])
  2 - output([t2.c1]), filter(nil), rowset=16
      equal_conds([t4.c1 = t2.c1]), other_conds(nil)
  3 - output([t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c1 = t3.c1]), other_conds(nil)
  4 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.c1]), filter(nil), rowset=16
      access([t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t4.c1]), filter(nil), rowset=16
      access([t4.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  8 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t1.c1], [t1.c0], [t1.c2], [t1.c3]), filter(nil), rowset=16
      access([t1.c1], [t1.c0], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
EXPLAIN SELECT * FROM t1
WHERE c1 in (
SELECT c1 FROM t2 
WHERE t2.c3 > 1
)
AND c1 in (
SELECT t2.c1 FROM t2 
inner join t3 on t2.c1=t3.c1
WHERE t2.c2 = t1.c2 
);
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN   |     |1       |10          |
|1 |├─SUBPLAN SCAN         |VIEW2|1       |5           |
|2 |│ └─HASH JOIN          |     |1       |5           |
|3 |│   ├─TABLE FULL SCAN  |t3   |1       |3           |
|4 |│   └─TABLE FULL SCAN  |t2   |1       |3           |
|5 |└─HASH RIGHT SEMI JOIN |     |1       |5           |
|6 |  ├─SUBPLAN SCAN       |VIEW1|1       |3           |
|7 |  │ └─TABLE FULL SCAN  |t2   |1       |3           |
|8 |  └─TABLE FULL SCAN    |t1   |1       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([VIEW2.t2.c2 = t1.c2], [t1.c1 = VIEW2.t2.c1]), other_conds(nil)
  1 - output([VIEW2.t2.c2], [VIEW2.t2.c1]), filter(nil), rowset=16
      access([VIEW2.t2.c2], [VIEW2.t2.c1])
  2 - output([t2.c2], [t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c1 = t3.c1]), other_conds(nil)
  3 - output([t3.c1]), filter(nil), rowset=16
      access([t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW1.c1]), other_conds(nil)
  6 - output([VIEW1.c1]), filter(nil), rowset=16
      access([VIEW1.c1])
  7 - output([t2.c1]), filter([t2.c3 > 1]), rowset=16
      access([t2.c3], [t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t1.c1], [t1.c2], [t1.c0], [t1.c3]), filter(nil), rowset=16
      access([t1.c1], [t1.c2], [t1.c0], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
EXPLAIN SELECT * FROM t1
WHERE c1 in (
SELECT t2.c1 FROM t2,t3
WHERE t2.c2 = t3.c2 
AND t2.c3 > 1
) 
AND c1 in (
SELECT t2.c1 FROM t2,t4
WHERE t2.c2 = t4.c2 
AND t2.c3 > 1
);
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN   |     |1       |12          |
|1 |├─SUBPLAN SCAN         |VIEW2|1       |5           |
|2 |│ └─HASH JOIN          |     |1       |5           |
|3 |│   ├─TABLE FULL SCAN  |t2   |1       |3           |
|4 |│   └─TABLE FULL SCAN  |t4   |1       |3           |
|5 |└─HASH RIGHT SEMI JOIN |     |1       |7           |
|6 |  ├─SUBPLAN SCAN       |VIEW1|1       |5           |
|7 |  │ └─HASH JOIN        |     |1       |5           |
|8 |  │   ├─TABLE FULL SCAN|t2   |1       |3           |
|9 |  │   └─TABLE FULL SCAN|t3   |1       |3           |
|10|  └─TABLE FULL SCAN    |t1   |1       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW2.c1]), other_conds(nil)
  1 - output([VIEW2.c1]), filter(nil), rowset=16
      access([VIEW2.c1])
  2 - output([t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c2 = t4.c2]), other_conds(nil)
  3 - output([t2.c2], [t2.c1]), filter([t2.c3 > 1]), rowset=16
      access([t2.c2], [t2.c3], [t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t4.c2]), filter(nil), rowset=16
      access([t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW1.c1]), other_conds(nil)
  6 - output([VIEW1.c1]), filter(nil), rowset=16
      access([VIEW1.c1])
  7 - output([t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c2 = t3.c2]), other_conds(nil)
  8 - output([t2.c2], [t2.c1]), filter([t2.c3 > 1]), rowset=16
      access([t2.c2], [t2.c3], [t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.c2]), filter(nil), rowset=16
      access([t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t1.c1], [t1.c0], [t1.c2], [t1.c3]), filter(nil), rowset=16
      access([t1.c1], [t1.c0], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
EXPLAIN SELECT * FROM t1
WHERE c1 in (
SELECT t2.c1 FROM t2,t4
WHERE t2.c2 = t4.c2 
AND t2.c3 > 1
)
AND c1 in (
SELECT t2.c1 FROM t2,t4
WHERE t2.c2 = t4.c2 
AND t2.c3 > 10
);
Query Plan
=================================================================
|ID|OPERATOR                 |NAME        |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |TEMP TABLE TRANSFORMATION|            |1       |7           |
|1 |├─TEMP TABLE INSERT      |TEMP1       |0       |5           |
|2 |│ └─HASH JOIN            |            |1       |5           |
|3 |│   ├─TABLE FULL SCAN    |t2          |1       |3           |
|4 |│   └─TABLE FULL SCAN    |t4          |1       |3           |
|5 |└─HASH RIGHT SEMI JOIN   |            |1       |3           |
|6 |  ├─SUBPLAN SCAN         |VIEW4       |1       |1           |
|7 |  │ └─TEMP TABLE ACCESS  |VIEW2(TEMP1)|1       |1           |
|8 |  └─HASH RIGHT SEMI JOIN |            |1       |3           |
|9 |    ├─SUBPLAN SCAN       |VIEW3       |1       |1           |
|10|    │ └─TEMP TABLE ACCESS|VIEW1(TEMP1)|1       |1           |
|11|    └─TABLE FULL SCAN    |t1          |1       |3           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
  1 - output(nil), filter(nil), rowset=16
  2 - output([t2.c3], [t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c2 = t4.c2]), other_conds(nil)
  3 - output([t2.c2], [t2.c3], [t2.c1]), filter([t2.c3 > 1 OR t2.c3 > 10]), rowset=16
      access([t2.c2], [t2.c3], [t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t4.c2]), filter(nil), rowset=16
      access([t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW4.c1]), other_conds(nil)
  6 - output([VIEW4.c1]), filter(nil), rowset=16
      access([VIEW4.c1])
  7 - output([VIEW2.t2.c1]), filter([VIEW2.t2.c3 > 10]), rowset=16
      access([VIEW2.t2.c3], [VIEW2.t2.c1])
  8 - output([t1.c0], [t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW3.c1]), other_conds(nil)
  9 - output([VIEW3.c1]), filter(nil), rowset=16
      access([VIEW3.c1])
 10 - output([VIEW1.t2.c1]), filter([VIEW1.t2.c3 > 1]), rowset=16
      access([VIEW1.t2.c3], [VIEW1.t2.c1])
 11 - output([t1.c1], [t1.c0], [t1.c2], [t1.c3]), filter(nil), rowset=16
      access([t1.c1], [t1.c0], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select count(*) from t1
where c1 in (
select t2.c1 from t2 
left join t3 on t2.c2=t3.c2 
right join t4 on t2.c2=t4.c2)
and c1 in (
select t2.c1 from t2 
left join (t3 left join t4 on t3.c2=t4.c2) on t2.c2=t3.c2);
count(*)
0
